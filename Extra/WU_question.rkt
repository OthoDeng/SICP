#lang sicp
;extra: wu question 
(define (operator lis)

 (define (rule_1 x)
  (define (end lis)
    (if (null? (cdr lis))
        (car lis)
        (end (cdr lis))))
    (if (eq? (end  x) 'i)
        (append x (list u))))
  (define (rule_2 x)
    (append x (cdr x)))
  (define (rule_3 x)
     (cond ((> (length x) 3)
            (cond ((and (eq? (cadr x) 'i)
                        (eq? (caddr x) 'i)
                        (eq? (cadddr x) 'i))
                   (append (list 'm 'u)
                           (cddddr x)))
                  (else '())))
          (else '())))
  (define (rule_4 x)
     (cond ((or (null? x)
                (null? (cdr x))) x)
            ((and (eq? (car x) 'u)
                  (eq? (cadr x) 'u))
             (rule_4 (cddr x)))
            (else (cons (car x)
                        (rule_4 (cdr x))))))
  (define (erase seq)
     (filter (lambda(x)
               (not (null? x))) seq))

  (erase (list (rule_1 lis) (rule_2 lis) (rule_3 lis) (rule_4 lis)))
)